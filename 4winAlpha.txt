import math

def print_board(board):
    for row in board:
        print("|".join(f" {cell} " for cell in row))
        print("-" * 37)
    print("  1   2   3   4   5   6   7\n")

def check_winner(board, player):
    # Check rows
    for row in board:
        for col in range(4):
            if all(row[col + i] == player for i in range(4)):
                return True

    # Check columns
    for col in range(7):
        for row in range(3):
            if all(board[row + i][col] == player for i in range(4)):
                return True

    # Check diagonals
    for row in range(3):
        for col in range(4):
            if all(board[row + i][col + i] == player for i in range(4)):
                return True
            if all(board[row + i][col + 3 - i] == player for i in range(4)):
                return True

    return False

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def utility(board):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    elif is_full(board):
        return 0
    else:
        return None

def minimax(board, depth, alpha, beta, maximizing_player):
    score = utility(board)

    if score is not None:
        return score

    if maximizing_player:
        max_eval = -math.inf
        for col in range(7):
            if board[0][col] == ' ':
                new_board = [row[:] for row in board]
                for row in range(5, -1, -1):
                    if new_board[row][col] == ' ':
                        new_board[row][col] = 'X'
                        break
                eval = minimax(new_board, depth + 1, alpha, beta, False)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for col in range(7):
            if board[0][col] == ' ':
                new_board = [row[:] for row in board]
                for row in range(5, -1, -1):
                    if new_board[row][col] == ' ':
                        new_board[row][col] = 'O'
                        break
                eval = minimax(new_board, depth + 1, alpha, beta, True)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def find_best_move(board):
    best_val = -math.inf
    best_move = None

    for col in range(7):
        if board[0][col] == ' ':
            new_board = [row[:] for row in board]
            for row in range(5, -1, -1):
                if new_board[row][col] == ' ':
                    new_board[row][col] = 'O'
                    break
            eval = minimax(new_board, 0, -math.inf, math.inf, False)
            if eval > best_val:
                best_val = eval
                best_move = col
    return best_move

def connect_four():
    board = [[' ' for _ in range(7)] for _ in range(6)]
    players = ['X', 'O']
    turn = 0

    while True:
        print_board(board)
        player = players[turn % 2]

        if player == 'X':
            while True:
                try:
                    column = int(input("Player X, choose a column (1-7): ")) - 1
                    if 0 <= column < 7 and board[0][column] == ' ':
                        break
                    else:
                        print("Invalid move. Please choose a valid column.")
                except ValueError:
                    print("Invalid input. Please enter a number.")
        else:
            column = find_best_move(board)
            print(f"Player {player} chooses column {column + 1}")

        for row in range(5, -1, -1):
            if board[row][column] == ' ':
                board[row][column] = player
                break

        if check_winner(board, player):
            print_board(board)
            print(f"Player {player} wins!")
            break

        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break

        turn += 1

if __name__ == "__main__":
    connect_four()